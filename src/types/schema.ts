// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Parcel extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Parcel entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Parcel entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Parcel", id.toString(), this);
  }

  static load(id: string): Parcel | null {
    return store.get("Parcel", id) as Parcel | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get x(): BigInt {
    let value = this.get("x");
    return value.toBigInt();
  }

  set x(value: BigInt) {
    this.set("x", Value.fromBigInt(value));
  }

  get y(): BigInt {
    let value = this.get("y");
    return value.toBigInt();
  }

  set y(value: BigInt) {
    this.set("y", Value.fromBigInt(value));
  }

  get owner(): string | null {
    let value = this.get("owner");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set owner(value: string | null) {
    if (value === null) {
      this.unset("owner");
    } else {
      this.set("owner", Value.fromString(value as string));
    }
  }

  get owners(): Array<string> | null {
    let value = this.get("owners");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string> | null) {
    if (value === null) {
      this.unset("owners");
    } else {
      this.set("owners", Value.fromStringArray(value as Array<string>));
    }
  }

  get operators(): Array<string> | null {
    let value = this.get("operators");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set operators(value: Array<string> | null) {
    if (value === null) {
      this.unset("operators");
    } else {
      this.set("operators", Value.fromStringArray(value as Array<string>));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get updateOperator(): Bytes | null {
    let value = this.get("updateOperator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set updateOperator(value: Bytes | null) {
    if (value === null) {
      this.unset("updateOperator");
    } else {
      this.set("updateOperator", Value.fromBytes(value as Bytes));
    }
  }

  get updateOperators(): Array<string> | null {
    let value = this.get("updateOperators");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set updateOperators(value: Array<string> | null) {
    if (value === null) {
      this.unset("updateOperators");
    } else {
      this.set(
        "updateOperators",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get estate(): string | null {
    let value = this.get("estate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estate(value: string | null) {
    if (value === null) {
      this.unset("estate");
    } else {
      this.set("estate", Value.fromString(value as string));
    }
  }

  get estates(): Array<string> | null {
    let value = this.get("estates");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set estates(value: Array<string> | null) {
    if (value === null) {
      this.unset("estates");
    } else {
      this.set("estates", Value.fromStringArray(value as Array<string>));
    }
  }

  get data(): string | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(value as string));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class EstateHistory extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save EstateHistory entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save EstateHistory entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("EstateHistory", id.toString(), this);
  }

  static load(id: string): EstateHistory | null {
    return store.get("EstateHistory", id) as EstateHistory | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get _prevEstateId(): string | null {
    let value = this.get("_prevEstateId");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set _prevEstateId(value: string | null) {
    if (value === null) {
      this.unset("_prevEstateId");
    } else {
      this.set("_prevEstateId", Value.fromString(value as string));
    }
  }

  get estateId(): string | null {
    let value = this.get("estateId");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estateId(value: string | null) {
    if (value === null) {
      this.unset("estateId");
    } else {
      this.set("estateId", Value.fromString(value as string));
    }
  }

  get parcel(): string {
    let value = this.get("parcel");
    return value.toString();
  }

  set parcel(value: string) {
    this.set("parcel", Value.fromString(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Estate extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Estate entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Estate entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Estate", id.toString(), this);
  }

  static load(id: string): Estate | null {
    return store.get("Estate", id) as Estate | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get owners(): Array<string> | null {
    let value = this.get("owners");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set owners(value: Array<string> | null) {
    if (value === null) {
      this.unset("owners");
    } else {
      this.set("owners", Value.fromStringArray(value as Array<string>));
    }
  }

  get operators(): Array<string> | null {
    let value = this.get("operators");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set operators(value: Array<string> | null) {
    if (value === null) {
      this.unset("operators");
    } else {
      this.set("operators", Value.fromStringArray(value as Array<string>));
    }
  }

  get operator(): Bytes | null {
    let value = this.get("operator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set operator(value: Bytes | null) {
    if (value === null) {
      this.unset("operator");
    } else {
      this.set("operator", Value.fromBytes(value as Bytes));
    }
  }

  get updateOperator(): Bytes | null {
    let value = this.get("updateOperator");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set updateOperator(value: Bytes | null) {
    if (value === null) {
      this.unset("updateOperator");
    } else {
      this.set("updateOperator", Value.fromBytes(value as Bytes));
    }
  }

  get updateOperators(): Array<string> | null {
    let value = this.get("updateOperators");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set updateOperators(value: Array<string> | null) {
    if (value === null) {
      this.unset("updateOperators");
    } else {
      this.set(
        "updateOperators",
        Value.fromStringArray(value as Array<string>)
      );
    }
  }

  get size(): i32 {
    let value = this.get("size");
    return value.toI32();
  }

  set size(value: i32) {
    this.set("size", Value.fromI32(value));
  }

  get parcels(): Array<string> | null {
    let value = this.get("parcels");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parcels(value: Array<string> | null) {
    if (value === null) {
      this.unset("parcels");
    } else {
      this.set("parcels", Value.fromStringArray(value as Array<string>));
    }
  }

  get data(): string | null {
    let value = this.get("data");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set data(value: string | null) {
    if (value === null) {
      this.unset("data");
    } else {
      this.set("data", Value.fromString(value as string));
    }
  }

  get createdAt(): BigInt | null {
    let value = this.get("createdAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set createdAt(value: BigInt | null) {
    if (value === null) {
      this.unset("createdAt");
    } else {
      this.set("createdAt", Value.fromBigInt(value as BigInt));
    }
  }

  get updatedAt(): BigInt | null {
    let value = this.get("updatedAt");
    if (value === null) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set updatedAt(value: BigInt | null) {
    if (value === null) {
      this.unset("updatedAt");
    } else {
      this.set("updatedAt", Value.fromBigInt(value as BigInt));
    }
  }
}

export class Authorization extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Authorization entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Authorization entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Authorization", id.toString(), this);
  }

  static load(id: string): Authorization | null {
    return store.get("Authorization", id) as Authorization | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get type(): string {
    let value = this.get("type");
    return value.toString();
  }

  set type(value: string) {
    this.set("type", Value.fromString(value));
  }

  get tokenAddress(): Bytes {
    let value = this.get("tokenAddress");
    return value.toBytes();
  }

  set tokenAddress(value: Bytes) {
    this.set("tokenAddress", Value.fromBytes(value));
  }

  get owner(): string {
    let value = this.get("owner");
    return value.toString();
  }

  set owner(value: string) {
    this.set("owner", Value.fromString(value));
  }

  get operator(): Bytes {
    let value = this.get("operator");
    return value.toBytes();
  }

  set operator(value: Bytes) {
    this.set("operator", Value.fromBytes(value));
  }

  get isApproved(): boolean {
    let value = this.get("isApproved");
    return value.toBoolean();
  }

  set isApproved(value: boolean) {
    this.set("isApproved", Value.fromBoolean(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Owner extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Owner entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Owner entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Owner", id.toString(), this);
  }

  static load(id: string): Owner | null {
    return store.get("Owner", id) as Owner | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (value === null) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(value as string));
    }
  }

  get estate(): string | null {
    let value = this.get("estate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estate(value: string | null) {
    if (value === null) {
      this.unset("estate");
    } else {
      this.set("estate", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Operator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Operator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Operator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Operator", id.toString(), this);
  }

  static load(id: string): Operator | null {
    return store.get("Operator", id) as Operator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (value === null) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(value as string));
    }
  }

  get estate(): string | null {
    let value = this.get("estate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estate(value: string | null) {
    if (value === null) {
      this.unset("estate");
    } else {
      this.set("estate", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class UpdateOperator extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save UpdateOperator entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save UpdateOperator entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("UpdateOperator", id.toString(), this);
  }

  static load(id: string): UpdateOperator | null {
    return store.get("UpdateOperator", id) as UpdateOperator | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes | null {
    let value = this.get("address");
    if (value === null) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes | null) {
    if (value === null) {
      this.unset("address");
    } else {
      this.set("address", Value.fromBytes(value as Bytes));
    }
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (value === null) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(value as string));
    }
  }

  get estate(): string | null {
    let value = this.get("estate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estate(value: string | null) {
    if (value === null) {
      this.unset("estate");
    } else {
      this.set("estate", Value.fromString(value as string));
    }
  }

  get eventName(): string {
    let value = this.get("eventName");
    return value.toString();
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    return value.toBigInt();
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get createdAt(): BigInt {
    let value = this.get("createdAt");
    return value.toBigInt();
  }

  set createdAt(value: BigInt) {
    this.set("createdAt", Value.fromBigInt(value));
  }
}

export class Data extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Data entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Data entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Data", id.toString(), this);
  }

  static load(id: string): Data | null {
    return store.get("Data", id) as Data | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get parcel(): string | null {
    let value = this.get("parcel");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set parcel(value: string | null) {
    if (value === null) {
      this.unset("parcel");
    } else {
      this.set("parcel", Value.fromString(value as string));
    }
  }

  get estate(): string | null {
    let value = this.get("estate");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set estate(value: string | null) {
    if (value === null) {
      this.unset("estate");
    } else {
      this.set("estate", Value.fromString(value as string));
    }
  }

  get version(): string {
    let value = this.get("version");
    return value.toString();
  }

  set version(value: string) {
    this.set("version", Value.fromString(value));
  }

  get name(): string | null {
    let value = this.get("name");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set name(value: string | null) {
    if (value === null) {
      this.unset("name");
    } else {
      this.set("name", Value.fromString(value as string));
    }
  }

  get description(): string | null {
    let value = this.get("description");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set description(value: string | null) {
    if (value === null) {
      this.unset("description");
    } else {
      this.set("description", Value.fromString(value as string));
    }
  }

  get ipns(): string | null {
    let value = this.get("ipns");
    if (value === null) {
      return null;
    } else {
      return value.toString();
    }
  }

  set ipns(value: string | null) {
    if (value === null) {
      this.unset("ipns");
    } else {
      this.set("ipns", Value.fromString(value as string));
    }
  }
}

export class Wallet extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Wallet entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Wallet entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Wallet", id.toString(), this);
  }

  static load(id: string): Wallet | null {
    return store.get("Wallet", id) as Wallet | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    return value.toBytes();
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get parcels(): Array<string> | null {
    let value = this.get("parcels");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set parcels(value: Array<string> | null) {
    if (value === null) {
      this.unset("parcels");
    } else {
      this.set("parcels", Value.fromStringArray(value as Array<string>));
    }
  }

  get estates(): Array<string> | null {
    let value = this.get("estates");
    if (value === null) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set estates(value: Array<string> | null) {
    if (value === null) {
      this.unset("estates");
    } else {
      this.set("estates", Value.fromStringArray(value as Array<string>));
    }
  }
}
